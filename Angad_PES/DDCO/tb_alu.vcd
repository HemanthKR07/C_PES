$date
	Sun Oct  6 22:48:14 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tb $end
$var wire 16 ! o [15:0] $end
$var wire 1 " cout $end
$var reg 1 # clk $end
$var reg 16 $ i0 [15:0] $end
$var reg 16 % i1 [15:0] $end
$var reg 2 & op [1:0] $end
$var reg 1 ' reset $end
$var integer 32 ( i [31:0] $end
$scope module alu_0 $end
$var wire 16 ) and_result [15:0] $end
$var wire 1 " cout $end
$var wire 16 * i0 [15:0] $end
$var wire 16 + i1 [15:0] $end
$var wire 2 , op [1:0] $end
$var wire 16 - or_result [15:0] $end
$var wire 16 . sub_result [15:0] $end
$var wire 16 / add_result [15:0] $end
$var reg 1 0 carry_out $end
$var reg 16 1 o [15:0] $end
$var reg 1 2 overflow $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
02
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
bx (
1'
b0 &
b0 %
b0 $
0#
0"
b0 !
$end
#50
1#
#60
b0 (
#100
0#
#125
0'
#150
1#
#160
b1 (
#200
0#
#250
1#
#260
b1111111111111111 -
1"
10
b1111111111111111 !
b1111111111111111 1
b10 (
b1010101001010101 $
b1010101001010101 *
b1111111111111111 /
b101010010101011 .
b101010110101010 %
b101010110101010 +
#300
0#
#350
1#
#360
b1 )
0"
00
b0 !
b0 1
b11 (
b1111111111111111 $
b1111111111111111 *
b0 /
b1111111111111110 .
b1 %
b1 +
#400
0#
#450
1#
#460
b111111111111111 -
12
1"
10
b1000000000000000 !
b1000000000000000 1
b100 (
b1 $
b1 *
b1000000000000000 /
b1000000000000010 .
b111111111111111 %
b111111111111111 +
#500
0#
#550
1#
#560
b0 )
b0 -
02
0"
00
b0 !
b0 1
b101 (
b1 &
b1 ,
b0 $
b0 *
b0 /
b0 .
b0 %
b0 +
#600
0#
#650
1#
#660
b1111111111111111 -
12
b101010010101011 !
b101010010101011 1
b110 (
b1010101001010101 $
b1010101001010101 *
b1111111111111111 /
b101010010101011 .
b101010110101010 %
b101010110101010 +
#700
0#
#750
1#
#760
b1 )
02
1"
10
b1111111111111110 !
b1111111111111110 1
b111 (
b1111111111111111 $
b1111111111111111 *
b0 /
b1111111111111110 .
b1 %
b1 +
#800
0#
#850
1#
#860
b111111111111111 -
b1000000000000010 !
b1000000000000010 1
b1000 (
b1 $
b1 *
b1000000000000000 /
b1000000000000010 .
b111111111111111 %
b111111111111111 +
#900
0#
#950
1#
#960
b0 )
b0 -
0"
00
b0 !
b0 1
b1001 (
b10 &
b10 ,
b0 $
b0 *
b0 /
b0 .
b0 %
b0 +
#1000
0#
#1050
1#
#1060
b1111111111111111 -
b1010 (
b1010101001010101 $
b1010101001010101 *
b1111111111111111 /
b101010010101011 .
b101010110101010 %
b101010110101010 +
#1100
0#
#1150
1#
#1160
b1 !
b1 1
b1 )
b1011 (
b1111111111111111 $
b1111111111111111 *
b0 /
b1111111111111110 .
b1 %
b1 +
#1200
0#
#1250
1#
#1260
b111111111111111 -
b1100 (
b1 $
b1 *
b1000000000000000 /
b1000000000000010 .
b111111111111111 %
b111111111111111 +
#1300
0#
#1350
1#
#1360
b0 )
b0 -
b0 !
b0 1
b1101 (
b11 &
b11 ,
b0 $
b0 *
b0 /
b0 .
b0 %
b0 +
#1400
0#
#1450
1#
#1460
b1111111111111111 !
b1111111111111111 1
b1111111111111111 -
b1110 (
b1010101001010101 $
b1010101001010101 *
b1111111111111111 /
b101010010101011 .
b101010110101010 %
b101010110101010 +
#1500
0#
#1550
1#
#1560
b1 )
b1111 (
b1111111111111111 $
b1111111111111111 *
b0 /
b1111111111111110 .
b1 %
b1 +
#1600
0#
#1650
1#
#1660
b111111111111111 !
b111111111111111 1
b111111111111111 -
b10000 (
b1 $
b1 *
b1000000000000000 /
b1000000000000010 .
b111111111111111 %
b111111111111111 +
#1700
0#
#1750
1#
#1800
0#
#1850
1#
#1900
0#
#1950
1#
#2000
0#
#2050
1#
#2100
0#
#2150
1#
#2200
0#
#2250
1#
#2300
0#
#2350
1#
#2400
0#
#2450
1#
#2500
0#
#2550
1#
#2600
0#
#2650
1#
#2660
